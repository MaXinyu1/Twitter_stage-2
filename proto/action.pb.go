// Code generated by protoc-gen-go. DO NOT EDIT.
// source: action.proto

package tw

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The request message// repeated means an array
type Ack struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ack) Reset()         { *m = Ack{} }
func (m *Ack) String() string { return proto.CompactTextString(m) }
func (*Ack) ProtoMessage()    {}
func (*Ack) Descriptor() ([]byte, []int) {
	return fileDescriptor_59885c909ad4dfd3, []int{0}
}

func (m *Ack) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ack.Unmarshal(m, b)
}
func (m *Ack) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ack.Marshal(b, m, deterministic)
}
func (m *Ack) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ack.Merge(m, src)
}
func (m *Ack) XXX_Size() int {
	return xxx_messageInfo_Ack.Size(m)
}
func (m *Ack) XXX_DiscardUnknown() {
	xxx_messageInfo_Ack.DiscardUnknown(m)
}

var xxx_messageInfo_Ack proto.InternalMessageInfo

type TIn struct {
	Username             string   `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Content              string   `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TIn) Reset()         { *m = TIn{} }
func (m *TIn) String() string { return proto.CompactTextString(m) }
func (*TIn) ProtoMessage()    {}
func (*TIn) Descriptor() ([]byte, []int) {
	return fileDescriptor_59885c909ad4dfd3, []int{1}
}

func (m *TIn) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TIn.Unmarshal(m, b)
}
func (m *TIn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TIn.Marshal(b, m, deterministic)
}
func (m *TIn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TIn.Merge(m, src)
}
func (m *TIn) XXX_Size() int {
	return xxx_messageInfo_TIn.Size(m)
}
func (m *TIn) XXX_DiscardUnknown() {
	xxx_messageInfo_TIn.DiscardUnknown(m)
}

var xxx_messageInfo_TIn proto.InternalMessageInfo

func (m *TIn) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *TIn) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

type Twitte struct {
	Message              *TIn     `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Time                 string   `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Twitte) Reset()         { *m = Twitte{} }
func (m *Twitte) String() string { return proto.CompactTextString(m) }
func (*Twitte) ProtoMessage()    {}
func (*Twitte) Descriptor() ([]byte, []int) {
	return fileDescriptor_59885c909ad4dfd3, []int{2}
}

func (m *Twitte) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Twitte.Unmarshal(m, b)
}
func (m *Twitte) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Twitte.Marshal(b, m, deterministic)
}
func (m *Twitte) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Twitte.Merge(m, src)
}
func (m *Twitte) XXX_Size() int {
	return xxx_messageInfo_Twitte.Size(m)
}
func (m *Twitte) XXX_DiscardUnknown() {
	xxx_messageInfo_Twitte.DiscardUnknown(m)
}

var xxx_messageInfo_Twitte proto.InternalMessageInfo

func (m *Twitte) GetMessage() *TIn {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *Twitte) GetTime() string {
	if m != nil {
		return m.Time
	}
	return ""
}

type Twitlist struct {
	Twitlists            []*Twitte `protobuf:"bytes,1,rep,name=Twitlists,proto3" json:"Twitlists,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Twitlist) Reset()         { *m = Twitlist{} }
func (m *Twitlist) String() string { return proto.CompactTextString(m) }
func (*Twitlist) ProtoMessage()    {}
func (*Twitlist) Descriptor() ([]byte, []int) {
	return fileDescriptor_59885c909ad4dfd3, []int{3}
}

func (m *Twitlist) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Twitlist.Unmarshal(m, b)
}
func (m *Twitlist) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Twitlist.Marshal(b, m, deterministic)
}
func (m *Twitlist) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Twitlist.Merge(m, src)
}
func (m *Twitlist) XXX_Size() int {
	return xxx_messageInfo_Twitlist.Size(m)
}
func (m *Twitlist) XXX_DiscardUnknown() {
	xxx_messageInfo_Twitlist.DiscardUnknown(m)
}

var xxx_messageInfo_Twitlist proto.InternalMessageInfo

func (m *Twitlist) GetTwitlists() []*Twitte {
	if m != nil {
		return m.Twitlists
	}
	return nil
}

type Username struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Username) Reset()         { *m = Username{} }
func (m *Username) String() string { return proto.CompactTextString(m) }
func (*Username) ProtoMessage()    {}
func (*Username) Descriptor() ([]byte, []int) {
	return fileDescriptor_59885c909ad4dfd3, []int{4}
}

func (m *Username) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Username.Unmarshal(m, b)
}
func (m *Username) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Username.Marshal(b, m, deterministic)
}
func (m *Username) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Username.Merge(m, src)
}
func (m *Username) XXX_Size() int {
	return xxx_messageInfo_Username.Size(m)
}
func (m *Username) XXX_DiscardUnknown() {
	xxx_messageInfo_Username.DiscardUnknown(m)
}

var xxx_messageInfo_Username proto.InternalMessageInfo

func (m *Username) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type User struct {
	UserName             string   `protobuf:"bytes,1,opt,name=UserName,proto3" json:"UserName,omitempty"`
	PassWord             string   `protobuf:"bytes,2,opt,name=PassWord,proto3" json:"PassWord,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *User) Reset()         { *m = User{} }
func (m *User) String() string { return proto.CompactTextString(m) }
func (*User) ProtoMessage()    {}
func (*User) Descriptor() ([]byte, []int) {
	return fileDescriptor_59885c909ad4dfd3, []int{5}
}

func (m *User) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_User.Unmarshal(m, b)
}
func (m *User) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_User.Marshal(b, m, deterministic)
}
func (m *User) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User.Merge(m, src)
}
func (m *User) XXX_Size() int {
	return xxx_messageInfo_User.Size(m)
}
func (m *User) XXX_DiscardUnknown() {
	xxx_messageInfo_User.DiscardUnknown(m)
}

var xxx_messageInfo_User proto.InternalMessageInfo

func (m *User) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *User) GetPassWord() string {
	if m != nil {
		return m.PassWord
	}
	return ""
}

type Info struct {
	User                 *User     `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Posts                *Twitlist `protobuf:"bytes,2,opt,name=Posts,proto3" json:"Posts,omitempty"`
	Following            []string  `protobuf:"bytes,3,rep,name=Following,proto3" json:"Following,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Info) Reset()         { *m = Info{} }
func (m *Info) String() string { return proto.CompactTextString(m) }
func (*Info) ProtoMessage()    {}
func (*Info) Descriptor() ([]byte, []int) {
	return fileDescriptor_59885c909ad4dfd3, []int{6}
}

func (m *Info) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Info.Unmarshal(m, b)
}
func (m *Info) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Info.Marshal(b, m, deterministic)
}
func (m *Info) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Info.Merge(m, src)
}
func (m *Info) XXX_Size() int {
	return xxx_messageInfo_Info.Size(m)
}
func (m *Info) XXX_DiscardUnknown() {
	xxx_messageInfo_Info.DiscardUnknown(m)
}

var xxx_messageInfo_Info proto.InternalMessageInfo

func (m *Info) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *Info) GetPosts() *Twitlist {
	if m != nil {
		return m.Posts
	}
	return nil
}

func (m *Info) GetFollowing() []string {
	if m != nil {
		return m.Following
	}
	return nil
}

type FollowUnfollow struct {
	Username             string   `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Other                string   `protobuf:"bytes,2,opt,name=other,proto3" json:"other,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FollowUnfollow) Reset()         { *m = FollowUnfollow{} }
func (m *FollowUnfollow) String() string { return proto.CompactTextString(m) }
func (*FollowUnfollow) ProtoMessage()    {}
func (*FollowUnfollow) Descriptor() ([]byte, []int) {
	return fileDescriptor_59885c909ad4dfd3, []int{7}
}

func (m *FollowUnfollow) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FollowUnfollow.Unmarshal(m, b)
}
func (m *FollowUnfollow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FollowUnfollow.Marshal(b, m, deterministic)
}
func (m *FollowUnfollow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FollowUnfollow.Merge(m, src)
}
func (m *FollowUnfollow) XXX_Size() int {
	return xxx_messageInfo_FollowUnfollow.Size(m)
}
func (m *FollowUnfollow) XXX_DiscardUnknown() {
	xxx_messageInfo_FollowUnfollow.DiscardUnknown(m)
}

var xxx_messageInfo_FollowUnfollow proto.InternalMessageInfo

func (m *FollowUnfollow) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *FollowUnfollow) GetOther() string {
	if m != nil {
		return m.Other
	}
	return ""
}

type TwitterPage struct {
	Username             string   `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	UnFollowed           []string `protobuf:"bytes,2,rep,name=UnFollowed,proto3" json:"UnFollowed,omitempty"`
	Following            []string `protobuf:"bytes,3,rep,name=Following,proto3" json:"Following,omitempty"`
	Posts                []string `protobuf:"bytes,4,rep,name=Posts,proto3" json:"Posts,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TwitterPage) Reset()         { *m = TwitterPage{} }
func (m *TwitterPage) String() string { return proto.CompactTextString(m) }
func (*TwitterPage) ProtoMessage()    {}
func (*TwitterPage) Descriptor() ([]byte, []int) {
	return fileDescriptor_59885c909ad4dfd3, []int{8}
}

func (m *TwitterPage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TwitterPage.Unmarshal(m, b)
}
func (m *TwitterPage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TwitterPage.Marshal(b, m, deterministic)
}
func (m *TwitterPage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TwitterPage.Merge(m, src)
}
func (m *TwitterPage) XXX_Size() int {
	return xxx_messageInfo_TwitterPage.Size(m)
}
func (m *TwitterPage) XXX_DiscardUnknown() {
	xxx_messageInfo_TwitterPage.DiscardUnknown(m)
}

var xxx_messageInfo_TwitterPage proto.InternalMessageInfo

func (m *TwitterPage) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *TwitterPage) GetUnFollowed() []string {
	if m != nil {
		return m.UnFollowed
	}
	return nil
}

func (m *TwitterPage) GetFollowing() []string {
	if m != nil {
		return m.Following
	}
	return nil
}

func (m *TwitterPage) GetPosts() []string {
	if m != nil {
		return m.Posts
	}
	return nil
}

type IsTrue struct {
	IsTrue               bool     `protobuf:"varint,1,opt,name=isTrue,proto3" json:"isTrue,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IsTrue) Reset()         { *m = IsTrue{} }
func (m *IsTrue) String() string { return proto.CompactTextString(m) }
func (*IsTrue) ProtoMessage()    {}
func (*IsTrue) Descriptor() ([]byte, []int) {
	return fileDescriptor_59885c909ad4dfd3, []int{9}
}

func (m *IsTrue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IsTrue.Unmarshal(m, b)
}
func (m *IsTrue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IsTrue.Marshal(b, m, deterministic)
}
func (m *IsTrue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsTrue.Merge(m, src)
}
func (m *IsTrue) XXX_Size() int {
	return xxx_messageInfo_IsTrue.Size(m)
}
func (m *IsTrue) XXX_DiscardUnknown() {
	xxx_messageInfo_IsTrue.DiscardUnknown(m)
}

var xxx_messageInfo_IsTrue proto.InternalMessageInfo

func (m *IsTrue) GetIsTrue() bool {
	if m != nil {
		return m.IsTrue
	}
	return false
}

func init() {
	proto.RegisterType((*Ack)(nil), "tw.Ack")
	proto.RegisterType((*TIn)(nil), "tw.T_in")
	proto.RegisterType((*Twitte)(nil), "tw.Twitte")
	proto.RegisterType((*Twitlist)(nil), "tw.Twitlist")
	proto.RegisterType((*Username)(nil), "tw.Username")
	proto.RegisterType((*User)(nil), "tw.User")
	proto.RegisterType((*Info)(nil), "tw.Info")
	proto.RegisterType((*FollowUnfollow)(nil), "tw.FollowUnfollow")
	proto.RegisterType((*TwitterPage)(nil), "tw.TwitterPage")
	proto.RegisterType((*IsTrue)(nil), "tw.IsTrue")
}

func init() { proto.RegisterFile("action.proto", fileDescriptor_59885c909ad4dfd3) }

var fileDescriptor_59885c909ad4dfd3 = []byte{
	// 486 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0x4b, 0x6b, 0x1b, 0x3d,
	0x14, 0xf5, 0x63, 0xfc, 0x3a, 0x9e, 0xe4, 0x03, 0xf1, 0x51, 0x06, 0x13, 0x82, 0x11, 0x81, 0x9a,
	0x2e, 0x86, 0xd6, 0xed, 0xb2, 0x94, 0xda, 0x85, 0x86, 0x40, 0x29, 0x66, 0x6a, 0xd3, 0x65, 0x99,
	0x4e, 0xe4, 0x89, 0xb0, 0x2d, 0x99, 0x91, 0x82, 0xbb, 0xe9, 0x4f, 0xeb, 0x7f, 0x2b, 0x57, 0x9a,
	0xb1, 0x27, 0x59, 0x98, 0xae, 0x74, 0x8f, 0xce, 0xd5, 0xbd, 0xe7, 0x3e, 0x84, 0x30, 0xcd, 0xac,
	0xd4, 0x2a, 0xde, 0x17, 0xda, 0x6a, 0xd6, 0xb2, 0x07, 0xde, 0x41, 0x7b, 0x96, 0x6d, 0xf8, 0x7b,
	0x04, 0xcb, 0x1f, 0x52, 0xb1, 0x11, 0xfa, 0x8f, 0x46, 0x14, 0x2a, 0xdd, 0x89, 0xa8, 0x39, 0x6e,
	0x4e, 0x06, 0xc9, 0x11, 0xb3, 0x08, 0xbd, 0x4c, 0x2b, 0x2b, 0x94, 0x8d, 0x5a, 0x8e, 0xaa, 0x20,
	0xff, 0x88, 0xee, 0xf2, 0x20, 0xad, 0x15, 0x8c, 0xa3, 0xb7, 0x13, 0xc6, 0xa4, 0xb9, 0x7f, 0x3e,
	0x9c, 0xf6, 0x63, 0x7b, 0x88, 0x29, 0x74, 0x52, 0x11, 0x8c, 0x21, 0xb0, 0x72, 0x27, 0xca, 0x20,
	0xce, 0xe6, 0xef, 0xd0, 0xa7, 0x08, 0x5b, 0x69, 0x2c, 0x9b, 0x60, 0x50, 0xd9, 0x26, 0x6a, 0x8e,
	0xdb, 0x93, 0xe1, 0x14, 0x2e, 0x8a, 0x4b, 0x91, 0x9c, 0x48, 0x7e, 0x8d, 0xfe, 0xaa, 0x52, 0xc7,
	0x10, 0xd4, 0x54, 0x3b, 0x9b, 0x7f, 0x40, 0x40, 0x3c, 0x55, 0x45, 0xe7, 0xd7, 0x5a, 0x55, 0x15,
	0x26, 0x6e, 0x91, 0x1a, 0xf3, 0x5d, 0x17, 0xf7, 0xa5, 0xa2, 0x23, 0xe6, 0x6b, 0x04, 0x77, 0x6a,
	0xad, 0xd9, 0x15, 0x02, 0xea, 0x42, 0xbd, 0x24, 0x7a, 0x9f, 0xb8, 0x5b, 0xc6, 0xd1, 0x59, 0x68,
	0xd2, 0xda, 0x72, 0x74, 0x58, 0x69, 0x25, 0x8d, 0x89, 0xa7, 0xd8, 0x15, 0x06, 0x9f, 0xf5, 0x76,
	0xab, 0x0f, 0x52, 0xe5, 0x51, 0x7b, 0xdc, 0x9e, 0x0c, 0x92, 0xd3, 0x05, 0x9f, 0xe3, 0xd2, 0x83,
	0x95, 0x5a, 0xbb, 0xf3, 0xec, 0x1c, 0xfe, 0x47, 0x47, 0xdb, 0x07, 0x51, 0x94, 0x72, 0x3d, 0xe0,
	0xbf, 0x31, 0xf4, 0x0d, 0x2a, 0x16, 0xd4, 0xe4, 0x73, 0x01, 0xae, 0x81, 0x95, 0xf2, 0x09, 0x05,
	0x15, 0x4d, 0x6a, 0x6a, 0x37, 0xe7, 0xc5, 0x52, 0x7a, 0x5f, 0x6e, 0xe0, 0x18, 0x0f, 0xf8, 0x18,
	0xdd, 0x3b, 0xb3, 0x2c, 0x1e, 0x05, 0x7b, 0x81, 0xae, 0x74, 0x96, 0xcb, 0xdb, 0x4f, 0x4a, 0x34,
	0xfd, 0xd3, 0xc2, 0x45, 0xa9, 0x70, 0xe6, 0xb6, 0x90, 0x96, 0xe5, 0x56, 0x58, 0x37, 0x85, 0x1e,
	0x35, 0x6d, 0x96, 0x6d, 0x46, 0x61, 0xd5, 0x5c, 0x37, 0xc0, 0x06, 0x7b, 0x83, 0xcb, 0x5b, 0x61,
	0xeb, 0x95, 0x3d, 0xf1, 0x18, 0xfd, 0x77, 0xda, 0x0c, 0x47, 0xf3, 0x06, 0xbb, 0x01, 0xbe, 0xe8,
	0x5c, 0xaa, 0x4f, 0x0f, 0x22, 0xdb, 0xb0, 0xe3, 0xb4, 0x46, 0x6e, 0x89, 0xbc, 0x48, 0xde, 0x60,
	0x2f, 0x71, 0x91, 0x88, 0x5c, 0x1a, 0x2b, 0x8a, 0xf3, 0x8e, 0x37, 0xc0, 0x37, 0xa1, 0xee, 0xcb,
	0x05, 0x3f, 0xee, 0xf3, 0x33, 0xaf, 0x18, 0x28, 0x47, 0x48, 0x2b, 0xc1, 0x88, 0x7b, 0x3a, 0xd2,
	0x67, 0xfe, 0xaf, 0x11, 0x56, 0xcc, 0xbf, 0xbd, 0x98, 0xbf, 0x42, 0x24, 0x75, 0x9c, 0x17, 0xfb,
	0x2c, 0x16, 0xbf, 0xd2, 0xdd, 0x7e, 0x2b, 0x4c, 0x6c, 0x7d, 0xe1, 0xf3, 0xb0, 0xea, 0x00, 0xfd,
	0xeb, 0x45, 0xf3, 0x67, 0xd7, 0x7d, 0xf0, 0xb7, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0xa5, 0xc2,
	0xc5, 0x5e, 0xf0, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TwitterActionClient is the client API for TwitterAction service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TwitterActionClient interface {
	GetName(ctx context.Context, in *Ack, opts ...grpc.CallOption) (*Username, error)
	GetTwitterPage(ctx context.Context, in *Username, opts ...grpc.CallOption) (*TwitterPage, error)
	LoginCheck(ctx context.Context, in *User, opts ...grpc.CallOption) (*IsTrue, error)
	RegisterCheck(ctx context.Context, in *User, opts ...grpc.CallOption) (*IsTrue, error)
	SendTwitte(ctx context.Context, in *TIn, opts ...grpc.CallOption) (*IsTrue, error)
	FollowUser(ctx context.Context, in *FollowUnfollow, opts ...grpc.CallOption) (*IsTrue, error)
	UnfollowUser(ctx context.Context, in *FollowUnfollow, opts ...grpc.CallOption) (*IsTrue, error)
}

type twitterActionClient struct {
	cc *grpc.ClientConn
}

func NewTwitterActionClient(cc *grpc.ClientConn) TwitterActionClient {
	return &twitterActionClient{cc}
}

func (c *twitterActionClient) GetName(ctx context.Context, in *Ack, opts ...grpc.CallOption) (*Username, error) {
	out := new(Username)
	err := c.cc.Invoke(ctx, "/tw.TwitterAction/GetName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twitterActionClient) GetTwitterPage(ctx context.Context, in *Username, opts ...grpc.CallOption) (*TwitterPage, error) {
	out := new(TwitterPage)
	err := c.cc.Invoke(ctx, "/tw.TwitterAction/GetTwitterPage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twitterActionClient) LoginCheck(ctx context.Context, in *User, opts ...grpc.CallOption) (*IsTrue, error) {
	out := new(IsTrue)
	err := c.cc.Invoke(ctx, "/tw.TwitterAction/LoginCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twitterActionClient) RegisterCheck(ctx context.Context, in *User, opts ...grpc.CallOption) (*IsTrue, error) {
	out := new(IsTrue)
	err := c.cc.Invoke(ctx, "/tw.TwitterAction/RegisterCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twitterActionClient) SendTwitte(ctx context.Context, in *TIn, opts ...grpc.CallOption) (*IsTrue, error) {
	out := new(IsTrue)
	err := c.cc.Invoke(ctx, "/tw.TwitterAction/SendTwitte", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twitterActionClient) FollowUser(ctx context.Context, in *FollowUnfollow, opts ...grpc.CallOption) (*IsTrue, error) {
	out := new(IsTrue)
	err := c.cc.Invoke(ctx, "/tw.TwitterAction/FollowUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twitterActionClient) UnfollowUser(ctx context.Context, in *FollowUnfollow, opts ...grpc.CallOption) (*IsTrue, error) {
	out := new(IsTrue)
	err := c.cc.Invoke(ctx, "/tw.TwitterAction/UnfollowUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TwitterActionServer is the server API for TwitterAction service.
type TwitterActionServer interface {
	GetName(context.Context, *Ack) (*Username, error)
	GetTwitterPage(context.Context, *Username) (*TwitterPage, error)
	LoginCheck(context.Context, *User) (*IsTrue, error)
	RegisterCheck(context.Context, *User) (*IsTrue, error)
	SendTwitte(context.Context, *TIn) (*IsTrue, error)
	FollowUser(context.Context, *FollowUnfollow) (*IsTrue, error)
	UnfollowUser(context.Context, *FollowUnfollow) (*IsTrue, error)
}

func RegisterTwitterActionServer(s *grpc.Server, srv TwitterActionServer) {
	s.RegisterService(&_TwitterAction_serviceDesc, srv)
}

func _TwitterAction_GetName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ack)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwitterActionServer).GetName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tw.TwitterAction/GetName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwitterActionServer).GetName(ctx, req.(*Ack))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwitterAction_GetTwitterPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Username)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwitterActionServer).GetTwitterPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tw.TwitterAction/GetTwitterPage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwitterActionServer).GetTwitterPage(ctx, req.(*Username))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwitterAction_LoginCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwitterActionServer).LoginCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tw.TwitterAction/LoginCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwitterActionServer).LoginCheck(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwitterAction_RegisterCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwitterActionServer).RegisterCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tw.TwitterAction/RegisterCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwitterActionServer).RegisterCheck(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwitterAction_SendTwitte_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwitterActionServer).SendTwitte(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tw.TwitterAction/SendTwitte",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwitterActionServer).SendTwitte(ctx, req.(*TIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwitterAction_FollowUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowUnfollow)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwitterActionServer).FollowUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tw.TwitterAction/FollowUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwitterActionServer).FollowUser(ctx, req.(*FollowUnfollow))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwitterAction_UnfollowUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowUnfollow)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwitterActionServer).UnfollowUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tw.TwitterAction/UnfollowUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwitterActionServer).UnfollowUser(ctx, req.(*FollowUnfollow))
	}
	return interceptor(ctx, in, info, handler)
}

var _TwitterAction_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tw.TwitterAction",
	HandlerType: (*TwitterActionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetName",
			Handler:    _TwitterAction_GetName_Handler,
		},
		{
			MethodName: "GetTwitterPage",
			Handler:    _TwitterAction_GetTwitterPage_Handler,
		},
		{
			MethodName: "LoginCheck",
			Handler:    _TwitterAction_LoginCheck_Handler,
		},
		{
			MethodName: "RegisterCheck",
			Handler:    _TwitterAction_RegisterCheck_Handler,
		},
		{
			MethodName: "SendTwitte",
			Handler:    _TwitterAction_SendTwitte_Handler,
		},
		{
			MethodName: "FollowUser",
			Handler:    _TwitterAction_FollowUser_Handler,
		},
		{
			MethodName: "UnfollowUser",
			Handler:    _TwitterAction_UnfollowUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "action.proto",
}
